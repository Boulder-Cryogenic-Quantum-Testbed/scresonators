import csv
import numpy as np
import pandas as pd
from pathlib import Path

class FileIO:
    
    """
        scope:
            takes the path to a *single* (?) csv and returns a pandas dataframe with
            units properly adjusted and labeled
            
            (1) open the csv file at specified path
            (2) check if csv file has headers on the first line
            (3) uses pandas to read csv file
                (i) if headers are in the file or given as argument, use those
                (i) if no headers, then use check_xyz methods to create some
    """
    
    def __init__(self, filepath:Path, df_headers = None, verbose = False):
        self.df_headers = df_headers
        self.verbose = verbose
        
        # we want to work exclusively with pathlib.Path objects, so
        # use this method to auto convert that if a str was passed
        pathlib_path = self.make_pathlib_path(filepath)
        
        self.pathlib_path = pathlib_path
        self.filepath = str(pathlib_path)
        
        
    def make_pathlib_path(self, pathlib_filepath):
        """
            takes a str or pathlib.Path as an argument, checks which one
                was given, and then properly saves:
                    self.filepath as a string  (full path string to csv)
                    self.pathlib_path as a Path object  (full Path obj to csv)
                    self.filename as a string  (just filename of csv)
        """
        
        # check if argument is a pathlib.Path object
        if isinstance(pathlib_filepath, Path) is False:
            # if not a Path, try to turn it into one
            try:
                final_path = Path(pathlib_filepath)
            except Exception as e:
                # just hope for the best if it fails I guess
                print(f"Exception occurred: bypassing \n    {e}")
                final_path = pathlib_filepath
        else: 
            # do nothing otherwise
            final_path = pathlib_filepath
            
        if self.verbose is True:
            print(f"Successfully acquired pathlib path: {type(final_path)} \n   {final_path=}\n")
        
        return final_path
        
        
    def load_df(self, df:pd.DataFrame):
        """
            same as load_csv, but instead of using pathlib to open a csv to get
                a pandas dataframe, it just takes a dataframe as an argument
                and loads it 
        """
        if isinstance(df, pd.DataFrame) is False:
            raise TypeError
        
        return NotImplemented
        
        # XXX: should load_csv call load_df?

        
        
    def load_csv(self, pathlib_filepath:Path=None):
        """
            filepath -> should be a pathlib.Path object
            self.filepath -> saved as a string, ideally generated by pathlib
                                so it can be easily converted back with 
                                filepath_obj = Path(self.filepath)
        """
        
        if pathlib_filepath is None and self.filepath is not None:
            filepath = self.filepath
        else:
            filepath = pathlib_filepath
        
        # if there is a set of headers, use those, otherwise let pandas grab from file
        if self.df_headers is None:
            self.df = pd.read_csv(filepath, index_col=0)
            self.df_headers = self.df.columns
        else: 
            # make sure to skip the first row of headers if we have our own
            self.df = pd.read_csv(filepath, names=self.df_headers, skiprows=1, index_col=0)
        
        # XXX: should load_csv call load_df?
        
        self.var_list = [col for col in self.df]

        if self.verbose is True:
            print("Successfully loaded csv file into FileIO - displaying all variables and dataframe itself")
            try:
                display(self.var_list)
                display(self.df)
            except:
                print(self.var_list)
                print(self.df.to_markdown)
        
        return self.df
            
    def generate_headers():
        pass
    
    def check_for_header():
        pass
    
    def check_phase_units():
        pass
    
    def check_s21_units():
        pass
    
    # TODO: detect dB vs lin units
    # TODO: detect rads vs deg
    # TODO: detect Hz vs GHz