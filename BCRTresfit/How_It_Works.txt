\\\Starting Notes////

This code is made to fit complex S21 data for notch type resonators using the Diameter Correction Method (DCM) and Inverse S21 method (INV) fittings
DCM> M. S. Khalil, M. J. A. Stoutimore, F. C. Wellstood, and K. D. Osborn    Journal of Applied Physics 111, 054510 (2012); doi: 10.1063/1.3692073
INV> A. Megrant et al.     APPLIED PHYSICS LETTERS 100, 113510 (2012)

The fitting functions are as follows:
DCM model: (1-(Q/Qc)*np.exp(1j*phi)/(1 + 1j*2*Q*(x-w1)/w1))
   >>>For DCM: Q = 1/(1/Qi + Re[1/Qc])
INV model: (1 + Qi/Qc*np.exp(-1j*phi)/(1 + 1j*2*Qi*(x-w1)/w1))

>INPUT:
The code takes in a .csv file (accepts .txt as well), containing 3 columns separated by commas where each line represents one point of S21 data
   >>>Note that there cannot be a header in this file, the code only accepts the data with no header
The first column is monotonically increasing frequency in GHz
The second column is magnitude of S21 in dB (log mag)
The third column is phase of S21 in radians
   >>>More information regarding standard data format can be found here https://github.com/Boulder-Cryogenic-Resonator-Testbed/measurement/issues/19

User needs to ensure that the data has at least 20 points otherwise the code will fail.
If user does not include points near off resonance in addition to points near resonance, fitting will not be accurate and could fail entirely
   >>>In simple terms: The fitting needs a full circle (in complex plane) to work optimally

>OUTPUT:
The code will output a few pieces of information upon successful completion of fit:
1: The code will output four figures showing the steps it is taking to normalize the data titled Normalize_1 through Normalize_4
2: If the user opted to have the code guess initial parameters, the code will output three figures showing the steps taken to find resonance and phi
3: The code outputs a figure displaying a variety of information regarding how the fit was completed. This includes a plot of both the raw and final fit of data
in the complex plane, plots of the linear fits that normalize the data for both magnitude and phase, plots of the normalized magnitude and phase with their final
fits, manually input guess parameters, and the final parameters found from the fit.
4: The code will also print a .csv file displaying the information that the fit has gathered with each term on a new line:
   DCM> Q, 1/Re[1/Q_c], Q_c, Q_i, f_c, phi
   INV> Q_c, Q_i, f_c, phi

Using the style listed in the example file, the user calls the Fit_Resonator() function directly from the file themselves.

-------------------------------------------------------------------------------------------------------------------------------------------------------------

\\\Code Overview///

1: Code takes in user data from 3 columns of data file and passes it to Fit_Resonator function along with user preferences
2: Data is pre-processed using a linear fit for both magnitude and phase of S21 so that start and end points of S21 data are at (1,0i) in the complex plane
3: If the user does not manually initialize a guess, the code will attempt to find a guess for fit parameters using Find_initial_guess function
4: Once the code has a guess for fit parameters, it will crop the data to points near resonance
5: After cropping, the code will minimize the guess parameters based on data points then compare minimized parameters to a Monte Carlo fit
   >>>This step will be repeated until the Monte Carlo fit does not give better results than the minimization
   >>>Monte Carlo fit is meant to check if fitting parameters are trapped in a local minimum
6: At this point the final parameter values have been found and fitting is complete. Final fitting is plotted and fit parameters are written to a .csv file

-------------------------------------------------------------------------------------------------------------------------------------------------------------

>>>Installation<<<

User will need the following python modules (or use the python virtual environment):
numpy
matplotlib
pandas
sys
os
lmfit
emcee
sympy
scipy
inflect

>install a module with "pip install ______" on the command line for python 3
>must install pip module before installing pips for python 2

-------------------------------------------------------------------------------------------------------------------------------------------------------------

>>>USER INPUT FILE<<<

=====An example of the way the following is done is included in the example file (Example4_User.py)=====

Section 1: Initial Setup

>The user will need to set the "dir" variable equal to the directory of folder containing user file
>This can be done with the command:
dir = "your path to data folder here"
>User will need to set the "filename" variable to the name of their file with:
filename = 'your name here.csv'
   >>>Note that code accepts both .txt and .csv file formats
>The user will then have to set the "filepath" variable to be equal to their directory plus the filename:
filepath = dic+'\\'+filename

Section 2: Setting Fit Variables

>User must initialize a Fit_Method class instance with arguments (fit_type,MC_iteration,MC_rounds,MC_fix,manual_init,MC_step_const)

fit_type: Either 'DCM' or 'INV' for the method user wishes to run
MC_iteration: The number of times the user wants the Monte Carlo fit to run
MC_rounds: The number of iterations the Monte Carlo fit will do. Default is 100 if not defined
MC_fix: An array of which variables the MC fit will not change during iteration.
   >>>An example of MC_fix is as follows: MC_fix = ['w1','Qi']
   >>>The strings user can use for MC_fix are as follows: 'Q','Qi','Qc','w1','phi','Qa'

manual_init: Used to define an initial guess variables
   >>>If the user wants to have the program auto guess, they can set manual_init equal to None
   >>>If the user wants to define their own initial guess, they must define it in the following format: manual_init = [1,2,3,4]
1 = Qi
2 = Qc (absolute value)
3 = resonance frequency (GHz)
4 = phi (radians)

MC_step_const: Range for the random parameter values chosen in MC fit. This scaling is exponential. The larger this number, the higher and lower the random values

Section 3: Fitting Data

>The user calls the Fit_Resonator function with:
params1,fig1,chi1,init1 = Fit_Resonator(filename,filepath,Method,normalize)
normalize: The number of points from the start/end of S21 data the user wants to use in the linear fit of S21 data for magnitude and phase

>The figure that contains the results is then saved with the following code:
fig1.savefig(dic+'\\'+filename+'_'+fit_type+'_fit.png')
   >>>This will save the figure to the same folder as the user's data.

-------------------------------------------------------------------------------------------------------------------------------------------------------------

>>>Fit_Resonator<<<

>Initialize Resonator class with user data

>Output plot "Normalize_1" to show data before normalization
>First remove cable delay by subtracting a linear fit of phase using the first 10 and last 10 points of data (10 by default, changed with variable normalize)
>Output plot "Normalize_2" to show data after cable delay has been removed (subtract slope of linear fit)
>Output plot "Normalize_3" to show data after first and last points of data have been rotated to the real axis (subtract intercept of linear fit)
>Normalize magnitude in dB by subtracting a linear fit of magnitude using the first 10 and last 10 points of data (also changed with variable normalize)
>Output plot "Normalize_4" to show data after subtraction of linear fit of magnitude (at this point, normalization is complete)

>Find initial guess parameters and put them into init variable
>kappa: Defined to be f_0/Q (DCM), f_0/Qi(INV), the bandwidth of frequencies at which the circle is at 45 degrees on either side of resonance

>Set xdata and ydata to contain the raw data for the correct frequency and transmission datapoints within the bandwidth determined by kappa and extract_factor
   >>>Note that all data points not within the bandwidth will not be used for the fit. This is very sensitive

>If the method is INV, inverse the ydata values
>Define 4 parameters "params"[0:3] based on initial guess. Q for DCM and Qi for INV

>Set up variables for the while loop of the minimize and Monte Carlo fit functions. Loop runs at most 5 times by default and at least once
>Fit the parameters with minimizer class according to its method: INV or DCM, using least squares fitting method
>Store values from least squares fit into variable fit_params
>Call Monte Carlo fit to find if the function is trapped in a local minimum using xdata, ydata, fit_params and the method
>If Monte Carlo fit does not have better accuracy than the minimize function, terminate the while loop and update the parameters into variable "output_params"
>Else, continue minimize function and Monte Carlo fit for another iteration
>Save minimum error value (correlates to run being used for fit) to report in plot
>Check that bandwidth is not equal to zero

>Plot the fit and save values found to output file, both with title according to the method used, INV or DCM
   >>>Plot has the following information:
   1: Graph of magnitude of S21 before normalization (blue) with linear fit shown (orange) shown in upper right
   2: Graph of magnitude of S21 after normalization (blue) and final fit (green) below #1
   3: Graph of phase of S21 before normalization (blue) with linear fit shown (orange) below #2
   4: Graph of phase of S21 after normalization (blue) and final fit (green) below #3
   5: Final fitting parameters below #4
   6: Graph of S21 in complex plane shown in bottom left
   >>>Note that error S21 in the plot and output file is calculated as the average distance squared of each point from the curve fit

-------------------------------------------------------------------------------------------------------------------------------------------------------------

>>>Find_initial_guess<<<

>Reassemble S21 from real and imaginary parts y1 and y2 into variable y
>Inverse y if method is INV
>Reset variables y1 and y2 in case y was inversed
>Find approximate circle fit with call to Find_Circle(): x_c = real coordinate of center of circle, y_c = imaginary coordinate of center of circe, r = radius
   >>>Given a set of x,y data return a circle that fits data using LeastSquares Circle Fit Randy Bullock (2017)
>Store location of center of circle in complex variable z_c
>Plot the data to show the circle fit in plot "circle.png"

>Subtract 1 from the complex data such that off resonant point P is at the origin and determine phi to be the angle from point P to the center of the circle
>Determine resonance point to be the point with largest magnitude (this means point furthest from off resonance point P)
>Plot the data to show the determined resonant point in plot "resonance.png" (resonant point shown as red point)
>Rotate data by phi, then plot to show data after phi rotation in plot "phi.png"

The code here is different for both methods due to the definition of the 3dB bandwidth changing between the two and circle diameter being defined differently
due to the data being inversed in INV:
DCM{
>Q_Qc set to be the diameter of the circle (found by getting distance from off resonant point P at the origin to point with max amplitude, aka. resonance)
>y_temp set equal to magnitude of S21 - (S21/sqrt(2)) such that y_temp will be equal to zero at approximately the 3dB data points
>Set idx1 and idx2 to be the indices of the 3dB data points
>Set kappa to be the bandwidth (absolute value of one 3dB data point minus the other)
>Set Q to be resonance frequency divided by kappa. This is the definition of Q for DCM
>Set Qc to be Q divided by the diameter (variable Q_Qc) because the diameter is Q/Qc
>Fit variables Q and Qc based on ideal resonator behavior: curve One_Cavity_peak_abs
>Set the variable init_guess to the initial guess parameters found
}
INV{
>Qi_Qc set to be the diameter of the circle (found by getting distance from off resonant point P at the origin to max amplitude, aka. resonance)
>y_temp set equal to magnitude of S21 - (S21/sqrt(2)) such that y_temp will be equal to zero at approximately the 3dB data points
>Set idx1 and idx2 to be the indices of the 3dB data points
>Set kappa to be the bandwidth (absolute value of one 3dB data point minus the other)
>Set Qi to be resonance frequency divided by kappa. This is the definition of Qi for INV
>Set Qc to be Qi divided by the diameter (variable Qi_Qc) because the diameter is Qi/Qc
>Fit variables Qi and Qc based on ideal resonator behavior: curve One_Cavity_peak_abs
>Set the variable init_guess to the initial guess parameters found
}

>Return init_guess, x_c, y_c and r. Here x_c, y_c and r represent the circle when it was first found, before any transformations

-------------------------------------------------------------------------------------------------------------------------------------------------------------

>>>MonteCarloFit<<<

>Set ydata_1stfit equal to S21 data by plugging in values for parameters into chosen method's fit equation
>If weight_array is 'yes': make array weight_array equal to inverse of ydata, else fill entire array with 1s
>Define weighted_ydata to be equal to weight_array times ydata. End result filled with 1s if MC_weight='yes' and exact same array as ydata otherwise
>Define weighted_ydata_1stfit to be equal to weight_array times ydata_1stfit. Equals ydata_1stfit/ydata if MC_weight='yes' else exact same array as ydata_1stfit
>Set error equal to the average vector magnitude (sqrt(n1^2 + n2^2 + ... + nlast^2)/# of terms) where each term is weighted_ydata - weighted_ydata_1stfit
   >>>In other words, error is the least squares error
>Set error_0 equal to error. This is so the initial value of error is preserved to check against error of Monte Carlo fit

>Run 100,000 iterations of the while loop for Monte Carlo fit by default:
while (counts<100,000){
>Increase counts by 1 each iteration
>Generate an array 'random' of 4 random numbers where each has the value of the initial parameters times the step constant (found in method class)
>If parameter set to be fixed (in user input file), set it's value in array 'random' to be 0
>Divide random value for phi by 10 (slot [3] in random array)
>Set all items in array random as e to the power of their old values
   >>>Note that the random values are raised as an exponent of e such that the distribution will still remain positive
      By multiplying by the new exponentiated random values by the old parameters, the distribution still remains somewhat linear while ensuring the correct sign
>Multiply the parameters by these random values to get variable new_parameter
>Modulus new phi term by 2pi such that it is between 0 and 2pi in range
>Make new set of S21 data called ydata_MC based on these new random parameters
>Check error the same way as before and put it in new_error variable
>If new_error < error: set parameters to be new parameters as they are better that before
>Set error as new_error to match error of new parameters
}

>If while loop got better results than minimize function parameters, run another iteration of minimize and Monte Carlo, else stop iterations of Monte Carlo fit
>Return values for parameter, stop_MC (determines if it should do another iteration), and error (array of all trials of Monte Carlo)

-------------------------------------------------------------------------------------------------------------------------------------------------------------


